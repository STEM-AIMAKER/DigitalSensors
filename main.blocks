<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="pPy!aboSiE|y4=f@)b[k" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id=":)A2=AeyETZ/mJh#`Bcm" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace HanshinDigitalSensors&#13;" line1="{&#13;" line2=" /**&#13;" line3=" * Hanshin STEM Sensors&#13;" line4=" */&#13;" line5="// color=190 weight=100 icon=&quot;\uf1ec&quot; block=&quot;Hanshin STEM digital sensors&quot;&#13;" line6="// groups=['Digital Shake','Fan Module', 'KeyBoard','LED Module','Megnetic','PIR','Relay Module','others']&#13;" line7="&#13;" line8="    //% group=&quot;Digital Shake&quot;&#13;" line9="    export namespace DigitalShake&#13;" line10="    {&#13;" line11="        let shakePin = null;&#13;" line12="        let onShakeEventHandler: (shake: boolean) =&gt; void;&#13;" line13="        //% blockId=shakeSensor block=&quot;Shake sensor at pin=%p&quot;&#13;" line14="        //% group=&quot;Digital Shake&quot;&#13;" line15="        export function shakeSensor(p: DigitalPin) : void {&#13;" line16="            shakePin = p&#13;" line17="            pins.setPull(p, PinPullMode.PullNone)&#13;" line18="        }&#13;" line19="&#13;" line20="        /**&#13;" line21="         * Registers code to run when there is a shake.&#13;" line22="         */&#13;" line23="        //% blockId=digitalshake_on_shake_event block=&quot;on shake event&quot; &#13;" line24="        //% group=&quot;Digital Shake&quot;&#13;" line25="        export function onShakeEvent(cb: (shake: boolean) =&gt; void) {&#13;" line26="            onShakeEventHandler = cb;&#13;" line27="        }&#13;" line28="&#13;" line29="        pins.onPulsed(shakePin, PulseValue.High, function () {&#13;" line30="            if( onShakeEventHandler )&#13;" line31="                onShakeEventHandler(true)&#13;" line32="        })&#13;" line33="        pins.onPulsed(shakePin, PulseValue.Low, function () {&#13;" line34="          if( onShakeEventHandler )&#13;" line35="                onShakeEventHandler(false)&#13;" line36="        })&#13;" line37="    };&#13;" line38="&#13;" line39="    //% group=&quot;Fan Module&quot;&#13;" line40="    export namespace FanModule {&#13;" line41="        let fanPin : DigitalPin = null;&#13;" line42="        //% blockId=runFan block=&quot;Run fan at pin=%p&quot;&#13;" line43="        //% group=&quot;Fan Module&quot;&#13;" line44="        export function runFan(p: DigitalPin) : void {&#13;" line45="            fanPin = p&#13;" line46="            pins.digitalWritePin(p,1)&#13;" line47="        }&#13;" line48="&#13;" line49="        //% blockId=runFanAndStop block=&quot;Run fan second=%second at pin=%p then stop&quot;&#13;" line50="        //% group=&quot;Fan Module&quot;&#13;" line51="        export function runFanAndStop(second: number, p: DigitalPin): void {&#13;" line52="            pins.digitalWritePin(p,1)&#13;" line53="            basic.pause(second*1000)&#13;" line54="            pins.digitalWritePin(p, 0)&#13;" line55="        }&#13;" line56="&#13;" line57="        //% blockId=stopFan block=&quot;Stop fan&quot;&#13;" line58="        //% group=&quot;Fan Module&quot;&#13;" line59="        export function stopFan() : void {&#13;" line60="            if( fanPin )&#13;" line61="                pins.digitalWritePin(fanPin, 0)&#13;" line62="        }&#13;" line63="    };&#13;" line64="&#13;" line65="    //% group=&quot;KeyBoard&quot;&#13;" line66="    export namespace KeyBoard {&#13;" line67="        let keyboardPin = null;&#13;" line68="        let onKeyBoardEventHandler: (pressed: boolean) =&gt; void;&#13;" line69="        //% blockId=keyBoardSensor block=&quot;KeyBoard sensor at pin=%p&quot;&#13;" line70="        //% group=&quot;KeyBoard&quot;&#13;" line71="        export function  keyBoardSensor(p: DigitalPin) : void {&#13;" line72="            keyboardPin = p&#13;" line73="            pins.setPull(p, PinPullMode.PullNone)&#13;" line74="        }&#13;" line75="&#13;" line76="        /**&#13;" line77="         * Registers code to run when keyboard is pressed.&#13;" line78="         */&#13;" line79="        //% blockId=onPressedEvent block=&quot;on keyboard pressed event&quot; &#13;" line80="        //% group=&quot;KeyBoard&quot;&#13;" line81="        export function onPressedEvent(cb: (pressed: boolean) =&gt; void) {&#13;" line82="            onKeyBoardEventHandler = cb;&#13;" line83="        }&#13;" line84="&#13;" line85="        pins.onPulsed(keyboardPin, PulseValue.High, function () {&#13;" line86="            if( onKeyBoardEventHandler )&#13;" line87="                onKeyBoardEventHandler(true)&#13;" line88="        })&#13;" line89="        pins.onPulsed(keyboardPin, PulseValue.Low, function () {&#13;" line90="          if( onKeyBoardEventHandler )&#13;" line91="                onKeyBoardEventHandler(false)&#13;" line92="        })&#13;" line93="    }&#13;" line94="&#13;" line95="}" numlines="96"></mutation></block></statement></block></xml>